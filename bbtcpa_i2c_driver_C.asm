; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	CORE\EM\TCPA\bbtcpa_i2c_driver_C.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_gpio_sda
PUBLIC	_gpio_scl
PUBLIC	_gpio_low
PUBLIC	_gpio_high
PUBLIC	_gpio_input
PUBLIC	_gpio_output
PUBLIC	_i2c_time
PUBLIC	_i2cwrite
PUBLIC	_i2cread
PUBLIC	_bSerialData
PUBLIC	_i2c_state
_BSS	SEGMENT
_bSerialData DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_gI2CBuffer_0:BYTE:080H
COMM	_gI2CBuffer_1:BYTE:080H
COMM	_gI2CBuffer_2:BYTE:080H
COMM	_gI2CBuffer_3:BYTE:080H
COMM	_gI2CBuffer_4:BYTE:080H
COMM	_gI2CBuffer_5:BYTE:080H
COMM	_gI2CBuffer_6:BYTE:080H
COMM	_gI2CBuffer_7:BYTE:080H
_DATA	ENDS
CONST	SEGMENT
_gpio_sda DD	013H
_gpio_scl DD	015H
_gpio_low DD	00H
_gpio_high DD	01H
_gpio_input DD	00H
_gpio_output DD	01H
_i2c_time DD	01H
_i2cwrite DB	00H
_i2cread DB	01H
CONST	ENDS
_DATA	SEGMENT
_i2c_state DD	04H
_DATA	ENDS
PUBLIC	_usleep
EXTRN	_atom_delay:NEAR
; Function compile flags: /Ogty
_TEXT	SEGMENT
_time$ = 8						; size = 4
_usleep	PROC NEAR
; File c:\bios\legacy\src\etx-pvr-exp\core\em\tcpa\bbtcpa_i2c_driver_c.c
; Line 66
	push	esi
	mov	esi, DWORD PTR _time$[esp]
$L726:
; Line 79
	call	_atom_delay
; Line 81
	mov	eax, esi
	dec	esi
	test	eax, eax
	jne	SHORT $L726
	pop	esi
; Line 84
	ret	0
_usleep	ENDP
_TEXT	ENDS
PUBLIC	_wait_usec
; Function compile flags: /Ogty
_TEXT	SEGMENT
_time$ = 8						; size = 4
_wait_usec PROC NEAR
; Line 169
	push	esi
; Line 170
	mov	esi, DWORD PTR _time$[esp]
$L1054:
	call	_atom_delay
	mov	eax, esi
	dec	esi
	test	eax, eax
	jne	SHORT $L1054
	pop	esi
; Line 171
	ret	0
_wait_usec ENDP
_TEXT	ENDS
PUBLIC	_GetI2CState
; Function compile flags: /Ogty
_TEXT	SEGMENT
_GetI2CState PROC NEAR
; Line 510
	mov	eax, DWORD PTR _i2c_state
; Line 511
	ret	0
_GetI2CState ENDP
_TEXT	ENDS
PUBLIC	_ReadIO
EXTRN	_ReadIO8:NEAR
EXTRN	_ReadIO16:NEAR
EXTRN	_ReadIO32:NEAR
; Function compile flags: /Ogty
_TEXT	SEGMENT
_Address$ = 8						; size = 4
_OpFlag$ = 12						; size = 4
_Value$ = 16						; size = 4
_ReadIO	PROC NEAR
; Line 525
	push	ss
; Line 526
	pop	ds
; Line 524
	mov	eax, DWORD PTR _OpFlag$[esp-4]
	and	eax, 127				; 0000007fH
; Line 528
	sub	eax, 0
	je	SHORT $L957
	dec	eax
	je	SHORT $L959
	dec	eax
	jne	SHORT $L954
; Line 536
	mov	eax, DWORD PTR _Address$[esp-4]
	push	eax
	call	_ReadIO32
	mov	ecx, DWORD PTR _Value$[esp]
	mov	DWORD PTR [ecx], eax
	add	esp, 4
; Line 539
	ret	0
$L959:
; Line 533
	mov	edx, DWORD PTR _Address$[esp-4]
	push	edx
	call	_ReadIO16
	mov	ecx, DWORD PTR _Value$[esp]
	mov	DWORD PTR [ecx], eax
	add	esp, 4
; Line 539
	ret	0
$L957:
; Line 530
	mov	edx, DWORD PTR _Address$[esp-4]
	push	edx
	call	_ReadIO8
	mov	ecx, DWORD PTR _Value$[esp]
	mov	BYTE PTR [ecx], al
	add	esp, 4
$L954:
; Line 539
	ret	0
_ReadIO	ENDP
_TEXT	ENDS
PUBLIC	_WriteIO
EXTRN	_WriteIO8:NEAR
EXTRN	_WriteIO16:NEAR
EXTRN	_WriteIO32:NEAR
; Function compile flags: /Ogty
_TEXT	SEGMENT
_Address$ = 8						; size = 4
_OpFlag$ = 12						; size = 4
_Value$ = 16						; size = 4
_WriteIO PROC NEAR
; Line 550
	push	ss
; Line 551
	pop	ds
; Line 549
	mov	eax, DWORD PTR _OpFlag$[esp-4]
	and	eax, 127				; 0000007fH
; Line 553
	sub	eax, 0
	je	SHORT $L974
	dec	eax
	je	SHORT $L976
	dec	eax
	jne	SHORT $L971
; Line 561
	mov	eax, DWORD PTR _Value$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _Address$[esp-4]
	push	ecx
	push	edx
	call	_WriteIO32
	add	esp, 8
; Line 564
	ret	0
$L976:
; Line 558
	mov	eax, DWORD PTR _Value$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _Address$[esp-4]
	push	ecx
	push	edx
	call	_WriteIO16
	add	esp, 8
; Line 564
	ret	0
$L974:
; Line 555
	mov	eax, DWORD PTR _Value$[esp-4]
	mov	edx, DWORD PTR _Address$[esp-4]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax]
	push	ecx
	push	edx
	call	_WriteIO8
	add	esp, 8
$L971:
; Line 564
	ret	0
_WriteIO ENDP
_TEXT	ENDS
PUBLIC	_SendCharToSerial
; Function compile flags: /Ogty
_TEXT	SEGMENT
_bData$ = 8						; size = 1
_SendCharToSerial PROC NEAR
; Line 567
	push	ss
	pop	ds
	mov	eax, DWORD PTR _bData$[esp-4]
	push	eax
	push	1016					; 000003f8H
	call	_WriteIO8
	add	esp, 8
; Line 568
	ret	0
_SendCharToSerial ENDP
_TEXT	ENDS
PUBLIC	_SendStringToSerial
; Function compile flags: /Ogty
_TEXT	SEGMENT
_sMessage$ = 8						; size = 4
$T1099 = 12						; size = 1
_nLength$ = 12						; size = 4
_SendStringToSerial PROC NEAR
; Line 570
	push	ebx
	push	esi
	push	edi
; Line 572
	mov	edi, DWORD PTR _nLength$[esp+8]
	xor	esi, esi
	test	edi, edi
	jbe	SHORT $L993
	mov	ebx, DWORD PTR _sMessage$[esp+8]
$L991:
; Line 573
	mov	al, BYTE PTR [esi+ebx]
	mov	BYTE PTR $T1099[esp+8], al
	push	ss
	pop	ds
	mov	ecx, DWORD PTR $T1099[esp+8]
	push	ecx
	push	1016					; 000003f8H
	call	_WriteIO8
	add	esp, 8
	inc	esi
	cmp	esi, edi
	jb	SHORT $L991
$L993:
; Line 574
	pop	edi
	pop	esi
	pop	ebx
	ret	0
_SendStringToSerial ENDP
_TEXT	ENDS
PUBLIC	_outputAsciiData
; Function compile flags: /Ogty
_TEXT	SEGMENT
$T1122 = -8						; size = 1
$T1142 = -4						; size = 1
_ddData$ = 8						; size = 4
_outputAsciiData PROC NEAR
; Line 575
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 577
	mov	edi, DWORD PTR _ddData$[esp+16]
	xor	esi, esi
	mov	ebx, 8
$L1000:
; Line 578
	mov	eax, edi
	mov	ecx, esi
	shl	eax, cl
	shr	eax, 28					; 0000001cH
	and	al, 15					; 0000000fH
; Line 579
	cmp	al, 9
	jbe	SHORT $L1003
; Line 580
	add	al, 55					; 00000037H
	mov	BYTE PTR $T1122[esp+20], al
	push	ss
	pop	ds
	mov	eax, DWORD PTR $T1122[esp+20]
	push	eax
; Line 581
	jmp	SHORT $L1145
$L1003:
; Line 582
	add	al, 48					; 00000030H
	mov	BYTE PTR $T1142[esp+20], al
	push	ss
	pop	ds
	mov	ecx, DWORD PTR $T1142[esp+20]
	push	ecx
$L1145:
	push	1016					; 000003f8H
	call	_WriteIO8
	add	esp, 8
	add	esi, 4
	dec	ebx
	jne	SHORT $L1000
; Line 584
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 8
	ret	0
_outputAsciiData ENDP
_TEXT	ENDS
PUBLIC	_gpio_init
; Function compile flags: /Ogty
_TEXT	SEGMENT
_gpio_init PROC NEAR
; Line 50
	push	esi
	push	edi
; Line 53
	push	ss
	pop	ds
	push	1280					; 00000500H
	call	_ReadIO32
	add	esp, 4
	mov	esi, eax
; Line 54
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	mov	edi, eax
; Line 55
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
; Line 58
	or	esi, 2621440				; 00280000H
; Line 59
	push	ss
	pop	ds
	push	esi
	push	1280					; 00000500H
	call	_WriteIO32
	add	esp, 8
; Line 62
	or	edi, 2621440				; 00280000H
; Line 63
	push	ss
	pop	ds
	push	edi
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
; Line 64
	pop	edi
	pop	esi
	ret	0
_gpio_init ENDP
_TEXT	ENDS
PUBLIC	_gpio_clear
; Function compile flags: /Ogty
_TEXT	SEGMENT
_pin$ = 8						; size = 4
_gpio_clear PROC NEAR
; Line 89
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
; Line 91
	mov	ecx, DWORD PTR _pin$[esp]
	mov	edx, 1
	shl	edx, cl
	add	esp, 4
	not	edx
	and	eax, edx
; Line 92
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
; Line 95
	ret	0
_gpio_clear ENDP
_TEXT	ENDS
PUBLIC	_gpio_configure
; Function compile flags: /Ogty
_TEXT	SEGMENT
_pin$ = 8						; size = 4
_ddGpioType$ = 12					; size = 4
_mode$ = 12						; size = 4
_gpio_configure PROC NEAR
; Line 103
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
; Line 106
	mov	ecx, DWORD PTR _mode$[esp]
	add	esp, 4
	test	ecx, ecx
	jne	SHORT $L744
; Line 107
	mov	ecx, DWORD PTR _pin$[esp-4]
	mov	edx, 1
	shl	edx, cl
	or	eax, edx
; Line 109
	jmp	SHORT $L1221
$L744:
	cmp	ecx, 1
	jne	SHORT $L746
; Line 110
	mov	edx, ecx
	mov	ecx, DWORD PTR _pin$[esp-4]
	shl	edx, cl
	not	edx
	and	eax, edx
$L1221:
	mov	DWORD PTR _ddGpioType$[esp-4], eax
; Line 111
	lea	eax, DWORD PTR _ddGpioType$[esp-4]
	push	eax
	push	2
	push	1284					; 00000504H
	call	_WriteIO
	add	esp, 12					; 0000000cH
$L746:
; Line 114
	ret	0
_gpio_configure ENDP
_TEXT	ENDS
PUBLIC	_gpio_set
; Function compile flags: /Ogty
_TEXT	SEGMENT
_pin$ = 8						; size = 4
_gpio_set PROC NEAR
; Line 118
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
; Line 120
	mov	ecx, DWORD PTR _pin$[esp]
	mov	edx, 1
	shl	edx, cl
	add	esp, 4
	or	eax, edx
; Line 121
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
; Line 124
	ret	0
_gpio_set ENDP
_TEXT	ENDS
PUBLIC	_gpio_read
; Function compile flags: /Ogty
_TEXT	SEGMENT
_pin$ = 8						; size = 4
_gpio_read PROC NEAR
; Line 129
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
; Line 130
	mov	ecx, DWORD PTR _pin$[esp]
	shr	eax, cl
	add	esp, 4
	and	eax, 1
; Line 131
	ret	0
_gpio_read ENDP
_TEXT	ENDS
PUBLIC	_GPIOInit
; Function compile flags: /Ogty
_TEXT	SEGMENT
_GPIOInit PROC NEAR
; Line 144
	jmp	_gpio_init
_GPIOInit ENDP
_TEXT	ENDS
PUBLIC	_GPIOSetDir
; Function compile flags: /Ogty
_TEXT	SEGMENT
_pin$ = 8						; size = 4
_mode$ = 12						; size = 4
_GPIOSetDir PROC NEAR
; Line 150
	jmp	_gpio_configure
_GPIOSetDir ENDP
_TEXT	ENDS
PUBLIC	_GPIOSetValue
; Function compile flags: /Ogty
_TEXT	SEGMENT
_pin$ = 8						; size = 4
_value$ = 12						; size = 4
_GPIOSetValue PROC NEAR
; Line 157
	mov	eax, DWORD PTR _value$[esp-4]
	test	eax, eax
	jne	SHORT $L773
; Line 158
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	mov	ecx, DWORD PTR _pin$[esp]
	mov	edx, 1
	shl	edx, cl
	add	esp, 4
	not	edx
	and	eax, edx
	push	ss
	pop	ds
	mov	DWORD PTR _pin$[esp-4], 1292		; 0000050cH
; Line 161
	mov	DWORD PTR _value$[esp-4], eax
	jmp	_WriteIO32
$L773:
; Line 160
	cmp	eax, 1
	jne	SHORT $L1322
; Line 161
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	mov	ecx, DWORD PTR _pin$[esp]
	mov	edx, 1
	shl	edx, cl
	add	esp, 4
	or	eax, edx
	push	ss
	pop	ds
	mov	DWORD PTR _pin$[esp-4], 1284		; 00000504H
	mov	DWORD PTR _value$[esp-4], eax
	jmp	_WriteIO32
$L1322:
; Line 163
	ret	0
_GPIOSetValue ENDP
_TEXT	ENDS
PUBLIC	_GPIOGetState
; Function compile flags: /Ogty
_TEXT	SEGMENT
_pin$ = 8						; size = 4
_GPIOGetState PROC NEAR
; Line 166
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	mov	ecx, DWORD PTR _pin$[esp]
	shr	eax, cl
	add	esp, 4
	and	eax, 1
; Line 167
	ret	0
_GPIOGetState ENDP
_TEXT	ENDS
PUBLIC	_I2CSendByte
; Function compile flags: /Ogty
_TEXT	SEGMENT
_ddGpioType$1695 = -4					; size = 4
_ddGpioType$1620 = -4					; size = 4
_data$ = 8						; size = 1
_I2CSendByte PROC NEAR
; Line 177
	push	ecx
	push	ebx
	push	ebp
; Line 180
	movzx	ebp, BYTE PTR _data$[esp+8]
	push	esi
	push	edi
	mov	ebx, 7
	npad	1
$L790:
; Line 182
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
; Line 183
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
; Line 184
	mov	eax, 1
	mov	ecx, ebx
	shl	eax, cl
	add	esp, 8
	test	eax, ebp
	je	SHORT $L793
; Line 185
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 524288				; 00080000H
	jne	SHORT $L1623
; Line 186
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	lea	ecx, DWORD PTR _ddGpioType$1620[esp+24]
	push	ecx
	or	eax, 524288				; 00080000H
	push	2
	push	1284					; 00000504H
	mov	DWORD PTR _ddGpioType$1620[esp+36], eax
	call	_WriteIO
	add	esp, 16					; 00000010H
$L1623:
; Line 188
	mov	edi, 1
; Line 190
	jmp	SHORT $L795
$L793:
; Line 191
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 524288				; 00080000H
	je	SHORT $L1789
; Line 192
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	lea	edx, DWORD PTR _ddGpioType$1695[esp+24]
	push	edx
	and	eax, -524289				; fff7ffffH
	push	2
	push	1284					; 00000504H
	mov	DWORD PTR _ddGpioType$1695[esp+36], eax
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 193
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -524289				; fff7ffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
$L1789:
; Line 195
	xor	edi, edi
$L795:
; Line 197
	mov	esi, 2
$L1831:
	call	_atom_delay
	dec	esi
	jne	SHORT $L1831
; Line 199
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	or	eax, 2097152				; 00200000H
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
$L798:
; Line 200
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $L798
; Line 201
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	shr	eax, 19					; 00000013H
	and	eax, 1
	add	esp, 4
	cmp	edi, eax
	jne	$L2540
; Line 204
	mov	esi, 2
	npad	7
$L2010:
	call	_atom_delay
	dec	esi
	jne	SHORT $L2010
	dec	ebx
	cmp	ebx, -1
	jg	$L790
; Line 208
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
; Line 209
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
; Line 210
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	or	eax, 524288				; 00080000H
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
	mov	esi, 2
; Line 211
$L2319:
	call	_atom_delay
	dec	esi
	jne	SHORT $L2319
; Line 213
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	or	eax, 2097152				; 00200000H
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
	npad	1
$L802:
; Line 214
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $L802
; Line 215
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 524288				; 00080000H
; Line 216
	mov	esi, 2
	jne	SHORT $L2521
$L2498:
	call	_atom_delay
	dec	esi
	jne	SHORT $L2498
; Line 217
	xor	eax, eax
; Line 223
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
$L2540:
; Line 202
	mov	eax, 2
; Line 223
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	0
	npad	4
; Line 220
$L2521:
	call	_atom_delay
	dec	esi
	jne	SHORT $L2521
; Line 223
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
	pop	ecx
	ret	0
_I2CSendByte ENDP
_TEXT	ENDS
PUBLIC	_I2CSendStart
; Function compile flags: /Ogty
_TEXT	SEGMENT
_ddGpioType$2795 = -4					; size = 4
_ddGpioType$2639 = -4					; size = 4
_ddGpioType$2599 = -4					; size = 4
_I2CSendStart PROC NEAR
; Line 228
	push	ecx
	push	esi
	push	edi
; Line 229
	xor	edi, edi
; Line 230
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	or	eax, 524288				; 00080000H
	mov	DWORD PTR _ddGpioType$2599[esp+16], eax
	lea	eax, DWORD PTR _ddGpioType$2599[esp+16]
	push	eax
	push	2
	push	1284					; 00000504H
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 231
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	lea	ecx, DWORD PTR _ddGpioType$2639[esp+16]
	push	ecx
	or	eax, 2097152				; 00200000H
	push	2
	push	1284					; 00000504H
	mov	DWORD PTR _ddGpioType$2639[esp+28], eax
	call	_WriteIO
	add	esp, 16					; 00000010H
	mov	esi, 2
	npad	4
; Line 232
$L2661:
	call	_atom_delay
	dec	esi
	jne	SHORT $L2661
$L810:
; Line 234
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 524288				; 00080000H
	je	$L2945
; Line 235
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $L2945
; Line 236
	mov	esi, 2
	npad	3
$L2754:
	call	_atom_delay
	dec	esi
	jne	SHORT $L2754
; Line 237
	inc	edi
	cmp	edi, 50					; 00000032H
	jb	SHORT $L810
; Line 239
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	lea	edx, DWORD PTR _ddGpioType$2795[esp+16]
	push	edx
	and	eax, -524289				; fff7ffffH
	push	2
	push	1284					; 00000504H
	mov	DWORD PTR _ddGpioType$2795[esp+28], eax
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 240
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -524289				; fff7ffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
	mov	esi, 2
; Line 241
$L2931:
	call	_atom_delay
	dec	esi
	jne	SHORT $L2931
; Line 242
	mov	eax, 8
; Line 243
	pop	edi
	pop	esi
	pop	ecx
	ret	0
$L2945:
	pop	edi
	mov	eax, 1
	pop	esi
	pop	ecx
	ret	0
_I2CSendStart ENDP
_TEXT	ENDS
PUBLIC	_I2CSendReStart
; Function compile flags: /Ogty
_TEXT	SEGMENT
_ddGpioType$3290 = -4					; size = 4
_ddGpioType$3215 = -4					; size = 4
_ddGpioType$3152 = -4					; size = 4
_ddGpioType$2991 = -4					; size = 4
_I2CSendReStart PROC NEAR
; Line 247
	push	ecx
	push	esi
; Line 249
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	and	eax, -2097153				; ffdfffffH
	mov	DWORD PTR _ddGpioType$2991[esp+12], eax
	lea	eax, DWORD PTR _ddGpioType$2991[esp+12]
	push	eax
	push	2
	push	1284					; 00000504H
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 250
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
; Line 251
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	lea	ecx, DWORD PTR _ddGpioType$3152[esp+12]
	push	ecx
	or	eax, 524288				; 00080000H
	push	2
	push	1284					; 00000504H
	mov	DWORD PTR _ddGpioType$3152[esp+24], eax
	call	_WriteIO
	add	esp, 16					; 00000010H
	mov	esi, 2
	npad	3
; Line 252
$L3174:
	call	_atom_delay
	dec	esi
	jne	SHORT $L3174
; Line 254
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	lea	edx, DWORD PTR _ddGpioType$3215[esp+12]
	push	edx
	or	eax, 2097152				; 00200000H
	push	2
	push	1284					; 00000504H
	mov	DWORD PTR _ddGpioType$3215[esp+24], eax
	call	_WriteIO
	add	esp, 16					; 00000010H
$L817:
; Line 255
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $L817
; Line 256
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	and	eax, -524289				; fff7ffffH
	mov	DWORD PTR _ddGpioType$3290[esp+12], eax
	lea	eax, DWORD PTR _ddGpioType$3290[esp+12]
	push	eax
	push	2
	push	1284					; 00000504H
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 257
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -524289				; fff7ffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
	mov	esi, 2
	npad	7
; Line 258
$L3426:
	call	_atom_delay
	dec	esi
	jne	SHORT $L3426
; Line 260
	mov	eax, 16					; 00000010H
; Line 261
	pop	esi
	pop	ecx
	ret	0
_I2CSendReStart ENDP
_TEXT	ENDS
PUBLIC	_I2CSendSLA
; Function compile flags: /Ogty
_TEXT	SEGMENT
_d_addr$ = 8						; size = 1
_I2CSendSLA PROC NEAR
; Line 265
	push	ebx
; Line 266
	mov	ebx, DWORD PTR _d_addr$[esp]
	push	ebx
	call	_I2CSendByte
	add	esp, 4
; Line 267
	test	eax, eax
	jne	SHORT $L824
; Line 268
	and	bl, 1
	neg	bl
	sbb	ebx, ebx
	and	ebx, 40					; 00000028H
	add	ebx, 24					; 00000018H
	mov	eax, ebx
	pop	ebx
; Line 284
	ret	0
$L824:
; Line 274
	cmp	eax, 1
	jne	SHORT $L828
; Line 275
	and	bl, al
	neg	bl
	sbb	ebx, ebx
	and	ebx, 40					; 00000028H
	add	ebx, 32					; 00000020H
	mov	eax, ebx
	pop	ebx
; Line 284
	ret	0
$L828:
; Line 281
	cmp	eax, 2
	jne	SHORT $L832
; Line 282
	xor	eax, eax
$L832:
	pop	ebx
; Line 284
	ret	0
_I2CSendSLA ENDP
_TEXT	ENDS
PUBLIC	_I2CSendData
; Function compile flags: /Ogty
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
_I2CSendData PROC NEAR
; Line 288
	push	ebx
; Line 291
	mov	ebx, DWORD PTR _length$[esp]
	push	esi
	push	edi
	xor	edi, edi
	test	ebx, ebx
	jbe	SHORT $L843
	mov	esi, DWORD PTR _buffer$[esp+8]
$L841:
; Line 292
	xor	eax, eax
	mov	al, BYTE PTR [esi]
	push	eax
	call	_I2CSendByte
	add	esp, 4
	inc	esi
; Line 293
	cmp	eax, 1
	je	SHORT $L3444
; Line 296
	cmp	eax, 2
	je	SHORT $L3445
	inc	edi
	cmp	edi, ebx
	jb	SHORT $L841
$L843:
	pop	edi
	pop	esi
; Line 300
	mov	eax, 40					; 00000028H
	pop	ebx
; Line 301
	ret	0
$L3444:
	pop	edi
	pop	esi
; Line 294
	mov	eax, 48					; 00000030H
	pop	ebx
; Line 301
	ret	0
$L3445:
	pop	edi
	pop	esi
; Line 297
	xor	eax, eax
	pop	ebx
; Line 301
	ret	0
_I2CSendData ENDP
_TEXT	ENDS
PUBLIC	_I2CReceiveData
; Function compile flags: /Ogty
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_length$ = 12						; size = 4
_I2CReceiveData PROC NEAR
; Line 308
	mov	eax, DWORD PTR _length$[esp-4]
	push	ebx
	push	ebp
	push	esi
	xor	ebp, ebp
	test	eax, eax
	push	edi
	jbe	$L4742
	mov	ebx, DWORD PTR _buffer$[esp+12]
$L856:
; Line 309
	mov	BYTE PTR [ebx], 0
; Line 310
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
; Line 311
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
; Line 312
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	or	eax, 524288				; 00080000H
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
	mov	esi, 2
	npad	6
; Line 313
$L3751:
	call	_atom_delay
	dec	esi
	jne	SHORT $L3751
; Line 314
	xor	esi, esi
	npad	6
$L859:
; Line 315
	mov	edi, 2
$L3774:
	call	_atom_delay
	dec	edi
	jne	SHORT $L3774
; Line 317
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	or	eax, 2097152				; 00200000H
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
$L863:
; Line 318
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $L863
; Line 319
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	shr	eax, 19					; 00000013H
	mov	ecx, 7
	sub	ecx, esi
	and	al, 1
	shl	al, cl
	mov	cl, BYTE PTR [ebx]
	add	esp, 4
	mov	edi, 2
	or	cl, al
	mov	BYTE PTR [ebx], cl
	npad	1
; Line 320
$L3953:
	call	_atom_delay
	dec	edi
	jne	SHORT $L3953
; Line 322
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
; Line 323
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
	inc	esi
	cmp	esi, 8
	jl	$L859
; Line 326
	mov	eax, DWORD PTR _length$[esp+12]
	inc	ebx
	dec	eax
	cmp	ebp, eax
	je	$L4712
; Line 335
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	and	eax, -524289				; fff7ffffH
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
; Line 336
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -524289				; fff7ffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
	mov	esi, 2
; Line 337
$L4543:
	call	_atom_delay
	dec	esi
	jne	SHORT $L4543
; Line 339
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	or	eax, 2097152				; 00200000H
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
$L871:
; Line 340
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $L871
; Line 341
	mov	esi, 2
	npad	4
$L4687:
	call	_atom_delay
	dec	esi
	jne	SHORT $L4687
	mov	eax, DWORD PTR _length$[esp+12]
	inc	ebp
	cmp	ebp, eax
	jb	$L856
; Line 344
	mov	eax, 88					; 00000058H
; Line 345
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
$L4712:
; Line 327
	mov	esi, 2
$L4176:
	call	_atom_delay
	dec	esi
	jne	SHORT $L4176
; Line 329
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	or	eax, 2097152				; 00200000H
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
$L867:
; Line 330
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $L867
; Line 331
	mov	esi, 2
	npad	5
$L4320:
	call	_atom_delay
	dec	esi
	jne	SHORT $L4320
$L4742:
; Line 345
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 88					; 00000058H
	pop	ebx
	ret	0
_I2CReceiveData ENDP
_TEXT	ENDS
PUBLIC	_I2CSendStop
; Function compile flags: /Ogty
_TEXT	SEGMENT
_ddGpioType$5210 = -4					; size = 4
_ddGpioType$5105 = -4					; size = 4
_ddGpioType$4928 = -4					; size = 4
_ddGpioType$4781 = -4					; size = 4
_I2CSendStop PROC NEAR
; Line 349
	push	ecx
	push	esi
; Line 351
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	and	eax, -2097153				; ffdfffffH
	mov	DWORD PTR _ddGpioType$4781[esp+12], eax
	lea	eax, DWORD PTR _ddGpioType$4781[esp+12]
	push	eax
	push	2
	push	1284					; 00000504H
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 352
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
; Line 353
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	lea	ecx, DWORD PTR _ddGpioType$4928[esp+12]
	push	ecx
	and	eax, -524289				; fff7ffffH
	push	2
	push	1284					; 00000504H
	mov	DWORD PTR _ddGpioType$4928[esp+24], eax
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 354
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -524289				; fff7ffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
	mov	esi, 2
; Line 355
$L5071:
	call	_atom_delay
	dec	esi
	jne	SHORT $L5071
; Line 356
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	lea	edx, DWORD PTR _ddGpioType$5105[esp+12]
	push	edx
	or	eax, 2097152				; 00200000H
	push	2
	push	1284					; 00000504H
	mov	DWORD PTR _ddGpioType$5105[esp+24], eax
	call	_WriteIO
	add	esp, 16					; 00000010H
$L876:
; Line 357
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $L876
; Line 358
	mov	esi, 2
	npad	3
$L5169:
	call	_atom_delay
	dec	esi
	jne	SHORT $L5169
; Line 359
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	or	eax, 524288				; 00080000H
	mov	DWORD PTR _ddGpioType$5210[esp+12], eax
	lea	eax, DWORD PTR _ddGpioType$5210[esp+12]
	push	eax
	push	2
	push	1284					; 00000504H
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 360
	pop	esi
	pop	ecx
	ret	0
_I2CSendStop ENDP
_TEXT	ENDS
PUBLIC	_SendError
; Function compile flags: /Ogty
_TEXT	SEGMENT
_state$ = 8						; size = 4
_SendError PROC NEAR
; Line 365
	mov	eax, DWORD PTR _state$[esp-4]
	test	eax, eax
	jne	SHORT $L882
; Line 366
	mov	DWORD PTR _i2c_state, 7
; Line 378
	call	_I2CSendStop
; Line 379
	mov	eax, DWORD PTR _i2c_state
; Line 380
	ret	0
$L882:
; Line 367
	cmp	eax, 32					; 00000020H
	jne	SHORT $L884
; Line 368
	mov	DWORD PTR _i2c_state, 1
; Line 378
	call	_I2CSendStop
; Line 379
	mov	eax, DWORD PTR _i2c_state
; Line 380
	ret	0
$L884:
; Line 369
	cmp	eax, 48					; 00000030H
	jne	SHORT $L886
; Line 370
	mov	DWORD PTR _i2c_state, 3
; Line 378
	call	_I2CSendStop
; Line 379
	mov	eax, DWORD PTR _i2c_state
; Line 380
	ret	0
$L886:
; Line 371
	xor	ecx, ecx
	cmp	eax, 72					; 00000048H
	setne	cl
	dec	ecx
	and	ecx, -3					; fffffffdH
	add	ecx, 5
	mov	DWORD PTR _i2c_state, ecx
; Line 378
	call	_I2CSendStop
; Line 379
	mov	eax, DWORD PTR _i2c_state
; Line 380
	ret	0
_SendError ENDP
_TEXT	ENDS
PUBLIC	_Initi2c
; Function compile flags: /Ogty
_TEXT	SEGMENT
_ddGpioType$5301 = -4					; size = 4
_ddGpioType$5261 = -4					; size = 4
_Initi2c PROC NEAR
; Line 388
	push	ecx
; Line 389
	cmp	DWORD PTR _i2c_state, 4
	jne	SHORT $L892
; Line 392
	call	_gpio_init
; Line 393
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	or	eax, 2097152				; 00200000H
	mov	DWORD PTR _ddGpioType$5261[esp+8], eax
	lea	eax, DWORD PTR _ddGpioType$5261[esp+8]
	push	eax
	push	2
	push	1284					; 00000504H
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 394
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	lea	ecx, DWORD PTR _ddGpioType$5301[esp+8]
	push	ecx
	or	eax, 524288				; 00080000H
	push	2
	push	1284					; 00000504H
	mov	DWORD PTR _ddGpioType$5301[esp+20], eax
	call	_WriteIO
	add	esp, 16					; 00000010H
; Line 395
	mov	DWORD PTR _i2c_state, 0
$L892:
; Line 396
	pop	ecx
	ret	0
_Initi2c ENDP
_TEXT	ENDS
PUBLIC	_BusClear
; Function compile flags: /Ogty
_TEXT	SEGMENT
_ddGpioType$5342 = -4					; size = 4
_BusClear PROC NEAR
; Line 400
	push	ecx
	push	esi
	push	edi
; Line 402
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	or	eax, 524288				; 00080000H
	mov	DWORD PTR _ddGpioType$5342[esp+16], eax
	lea	eax, DWORD PTR _ddGpioType$5342[esp+16]
	push	eax
	push	2
	push	1284					; 00000504H
	call	_WriteIO
	add	esp, 16					; 00000010H
	mov	edi, 9
$L896:
; Line 404
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
; Line 405
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	and	eax, -2097153				; ffdfffffH
	push	ss
	pop	ds
	push	eax
	push	1292					; 0000050cH
	call	_WriteIO32
	add	esp, 8
	mov	esi, 2
	npad	2
; Line 406
$L5564:
	call	_atom_delay
	dec	esi
	jne	SHORT $L5564
; Line 408
	push	ss
	pop	ds
	push	1284					; 00000504H
	call	_ReadIO32
	add	esp, 4
	or	eax, 2097152				; 00200000H
	push	ss
	pop	ds
	push	eax
	push	1284					; 00000504H
	call	_WriteIO32
	add	esp, 8
	npad	4
$L900:
; Line 409
	push	ss
	pop	ds
	push	1292					; 0000050cH
	call	_ReadIO32
	add	esp, 4
	test	eax, 2097152				; 00200000H
	je	SHORT $L900
; Line 410
	mov	esi, 2
	npad	5
$L5708:
	call	_atom_delay
	dec	esi
	jne	SHORT $L5708
; Line 403
	dec	edi
	jne	$L896
; Line 412
	call	_I2CSendStop
; Line 413
	pop	edi
	pop	esi
	pop	ecx
	ret	0
_BusClear ENDP
_TEXT	ENDS
PUBLIC	_Writei2c
; Function compile flags: /Ogty
_TEXT	SEGMENT
_d_addr$ = 8						; size = 1
_r_addr$ = 12						; size = 1
_buffer$ = 16						; size = 4
_length$ = 20						; size = 4
_Writei2c PROC NEAR
; Line 420
	cmp	DWORD PTR _i2c_state, 4
	jne	SHORT $L912
; Line 421
	call	_Initi2c
$L912:
	push	esi
; Line 423
	call	_I2CSendStart
	mov	esi, eax
; Line 424
	cmp	esi, 8
	je	SHORT $L913
; Line 425
	push	esi
	call	_SendError
	add	esp, 4
	pop	esi
; Line 443
	ret	0
$L913:
	push	ebx
; Line 427
	mov	ebx, DWORD PTR _d_addr$[esp+4]
	push	ebx
	call	_I2CSendByte
	add	esp, 4
	test	eax, eax
	jne	SHORT $L5733
	test	bl, 1
	je	SHORT $L914
	mov	esi, 64					; 00000040H
; Line 429
	push	esi
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 443
	ret	0
; Line 427
$L5733:
	cmp	eax, 1
	jne	SHORT $L5737
	and	bl, al
	neg	bl
	sbb	ebx, ebx
	and	ebx, 40					; 00000028H
	add	ebx, 32					; 00000020H
	mov	esi, ebx
; Line 429
	push	esi
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 443
	ret	0
; Line 427
$L5737:
	cmp	eax, 2
	jne	SHORT $L5743
	xor	esi, esi
$L5743:
; Line 429
	push	esi
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 443
	ret	0
$L914:
; Line 436
	mov	eax, DWORD PTR _length$[esp+4]
	mov	ecx, DWORD PTR _buffer$[esp+4]
	push	eax
	push	ecx
	call	_I2CSendData
	add	esp, 8
; Line 437
	cmp	eax, 40					; 00000028H
	je	SHORT $L915
; Line 438
	push	eax
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 443
	ret	0
$L915:
; Line 440
	call	_I2CSendStop
	pop	ebx
; Line 441
	mov	DWORD PTR _i2c_state, 0
; Line 442
	xor	eax, eax
	pop	esi
; Line 443
	ret	0
_Writei2c ENDP
_TEXT	ENDS
PUBLIC	_Readi2c
; Function compile flags: /Ogty
_TEXT	SEGMENT
_d_addr$ = 8						; size = 1
_r_addr$ = 12						; size = 1
_buffer$ = 16						; size = 4
_length$ = 20						; size = 4
_Readi2c PROC NEAR
; Line 449
	cmp	DWORD PTR _i2c_state, 4
	jne	SHORT $L926
; Line 450
	call	_Initi2c
$L926:
	push	esi
; Line 452
	call	_I2CSendStart
	mov	esi, eax
; Line 453
	cmp	esi, 8
	je	SHORT $L927
; Line 454
	push	esi
	call	_SendError
	add	esp, 4
	pop	esi
; Line 480
	ret	0
$L927:
	push	ebx
; Line 456
	mov	ebx, DWORD PTR _d_addr$[esp+4]
	push	ebx
	call	_I2CSendByte
	add	esp, 4
	test	eax, eax
	jne	SHORT $L5750
	test	bl, 1
	je	SHORT $L928
	mov	esi, 64					; 00000040H
; Line 458
	push	esi
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 480
	ret	0
; Line 456
$L5750:
	cmp	eax, 1
	jne	SHORT $L5754
	and	bl, al
	neg	bl
	sbb	ebx, ebx
	and	ebx, 40					; 00000028H
	add	ebx, 32					; 00000020H
	mov	esi, ebx
; Line 458
	push	esi
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 480
	ret	0
; Line 456
$L5754:
	cmp	eax, 2
	jne	SHORT $L5760
	xor	esi, esi
$L5760:
; Line 458
	push	esi
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 480
	ret	0
$L928:
; Line 460
	lea	eax, DWORD PTR _r_addr$[esp+4]
	push	1
	push	eax
	call	_I2CSendData
	add	esp, 8
; Line 461
	cmp	eax, 40					; 00000028H
	je	SHORT $L929
$L5762:
; Line 462
	push	eax
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 480
	ret	0
$L929:
; Line 464
	call	_I2CSendReStart
; Line 465
	cmp	eax, 16					; 00000010H
; Line 466
	jne	SHORT $L5762
; Line 468
	inc	bl
	push	ebx
	call	_I2CSendSLA
	add	esp, 4
; Line 469
	cmp	eax, 64					; 00000040H
; Line 470
	jne	SHORT $L5762
; Line 472
	mov	ecx, DWORD PTR _length$[esp+4]
	mov	edx, DWORD PTR _buffer$[esp+4]
	push	ecx
	push	edx
	call	_I2CReceiveData
	add	esp, 8
; Line 473
	cmp	eax, 88					; 00000058H
; Line 474
	jne	SHORT $L5762
; Line 476
	call	_I2CSendStop
	pop	ebx
; Line 478
	mov	DWORD PTR _i2c_state, 0
; Line 479
	xor	eax, eax
	pop	esi
; Line 480
	ret	0
_Readi2c ENDP
_TEXT	ENDS
PUBLIC	_Readi2c_no_r_addr
; Function compile flags: /Ogty
_TEXT	SEGMENT
$T5777 = -4						; size = 1
_d_addr$ = 8						; size = 1
_buffer$ = 12						; size = 4
_length$ = 16						; size = 4
_Readi2c_no_r_addr PROC NEAR
; Line 484
	push	ecx
; Line 486
	cmp	DWORD PTR _i2c_state, 4
	jne	SHORT $L941
; Line 487
	call	_Initi2c
$L941:
	push	esi
; Line 489
	call	_I2CSendStart
	mov	esi, eax
; Line 490
	cmp	esi, 8
	je	SHORT $L942
; Line 491
	push	esi
	call	_SendError
	add	esp, 4
	pop	esi
; Line 505
	pop	ecx
	ret	0
$L942:
	push	ebx
; Line 493
	mov	bl, BYTE PTR _d_addr$[esp+8]
	inc	bl
	mov	BYTE PTR $T5777[esp+12], bl
	mov	eax, DWORD PTR $T5777[esp+12]
	push	eax
	call	_I2CSendByte
	add	esp, 4
	test	eax, eax
	jne	SHORT $L5768
	test	bl, 1
	jne	SHORT $L943
	mov	esi, 24					; 00000018H
; Line 495
	push	esi
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 505
	pop	ecx
	ret	0
; Line 493
$L5768:
	cmp	eax, 1
	jne	SHORT $L5772
	and	bl, al
	neg	bl
	sbb	ebx, ebx
	and	ebx, 40					; 00000028H
	add	ebx, 32					; 00000020H
	mov	esi, ebx
; Line 495
	push	esi
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 505
	pop	ecx
	ret	0
; Line 493
$L5772:
	cmp	eax, 2
	jne	SHORT $L5778
	xor	esi, esi
$L5778:
; Line 495
	push	esi
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 505
	pop	ecx
	ret	0
$L943:
; Line 497
	mov	ecx, DWORD PTR _length$[esp+8]
	mov	edx, DWORD PTR _buffer$[esp+8]
	push	ecx
	push	edx
	call	_I2CReceiveData
	add	esp, 8
; Line 498
	cmp	eax, 88					; 00000058H
	je	SHORT $L944
; Line 499
	push	eax
	call	_SendError
	add	esp, 4
	pop	ebx
	pop	esi
; Line 505
	pop	ecx
	ret	0
$L944:
; Line 501
	call	_I2CSendStop
	pop	ebx
; Line 503
	mov	DWORD PTR _i2c_state, 0
; Line 504
	xor	eax, eax
	pop	esi
; Line 505
	pop	ecx
	ret	0
_Readi2c_no_r_addr ENDP
_TEXT	ENDS
PUBLIC	_gpio_i2c_interface
; Function compile flags: /Ogty
_TEXT	SEGMENT
_cmdType$ = 8						; size = 1
_gpio_i2c_interface PROC NEAR
; Line 596
	push	esi
	push	edi
; Line 626
	call	_gpio_init
	mov	esi, 300001				; 000493e1H
	npad	4
; Line 627
$L5798:
	call	_atom_delay
	dec	esi
	jne	SHORT $L5798
; Line 705
	mov	al, BYTE PTR _gI2CBuffer_0+1023
	cmp	al, 82					; 00000052H
	jne	SHORT $L1023
	mov	edi, DWORD PTR _gI2CBuffer_0+1019
	test	edi, edi
	je	SHORT $L5864
	npad	5
$L1027:
; Line 710
	push	edi
	push	OFFSET FLAT:_gI2CBuffer_0
	push	82					; 00000052H
	mov	DWORD PTR _gI2CBuffer_0, 0
	call	_Readi2c_no_r_addr
	add	esp, 12					; 0000000cH
	mov	esi, 4500001				; 0044aa21H
	npad	1
; Line 711
$L5821:
	call	_atom_delay
	dec	esi
	jne	SHORT $L5821
	cmp	DWORD PTR _gI2CBuffer_0, 50176		; 0000c400H
	jne	SHORT $L1027
	pop	edi
	pop	esi
; Line 755
	ret	0
$L1023:
; Line 730
	cmp	al, 83					; 00000053H
	jne	SHORT $L5864
	mov	esi, DWORD PTR _gI2CBuffer_0+1019
	test	esi, esi
	je	SHORT $L5864
; Line 748
	push	esi
	push	OFFSET FLAT:_gI2CBuffer_0
	push	0
	push	82					; 00000052H
	call	_Writei2c
	add	esp, 16					; 00000010H
	npad	9
$L1034:
; Line 749
	mov	edi, 1001				; 000003e9H
; Line 750
$L5844:
	call	_atom_delay
	dec	edi
	jne	SHORT $L5844
; Line 749
	dec	esi
	jne	SHORT $L1034
$L5864:
	pop	edi
	pop	esi
; Line 755
	ret	0
_gpio_i2c_interface ENDP
_TEXT	ENDS
END
